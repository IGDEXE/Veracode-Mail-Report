trigger:
- master

pool:
  vmImage: windows-latest

variables:
- group: Veracode-MailReport
- name: veracodeAppProfile
  value: MSDN.JavaScript

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Download e configuração: API Wrapper
      Write-Host "Configurando: Wrapper"
      $pastaferramenta = "$(Agent.BuildDirectory)"
      $urlDownload = "https://tools.veracode.com/integrations/API-Wrappers/C%23/bin/VeracodeC%23API.zip" # Define a url de download
      $caminhoDownload = "$env:LOCALAPPDATA/VeracodeAPI.zip" # Define um caminho para o arquivo de download
      Invoke-WebRequest -Uri "$urlDownload" -OutFile "$caminhoDownload" # Faz o download
      Expand-Archive -Path "$caminhoDownload" -DestinationPath "$pastaferramenta" -Force # Descompacta o ZIP para uma pasta
      Rename-Item -Path "$pastaferramenta/VeracodeC#API.exe" -NewName "$pastaferramenta/VeracodeAPI.exe" -Force # Renomei para remover o # do nome
      Remove-Item "$caminhoDownload" # Remove o arquivo de download
  displayName: 'Veracode Wrapper - Configuração'

- task: PowerShell@2
  inputs:
    workingDirectory: '$(Agent.BuildDirectory)'
    targetType: 'inline'
    script: |
      $veracodeAppName = "$(veracodeAppProfile)"
      # Recebe o App ID com base no nome da aplicacao dentro do Veracode
      [xml]$INFO = $(./VeracodeAPI.exe -vid $(veracodeID) -vkey $(VeracodeKey) -action GetAppList | Select-String -Pattern $veracodeAppName)
      # Filtra o App ID
      $appID = $INFO.app.app_id

      try {
          # Pega o ID da build
          [xml]$buildINFO = $(./VeracodeAPI.exe -vid $(veracodeID) -vkey $(VeracodeKey) -action getbuildinfo -appid $appID)
          $buildID = $buildINFO.buildinfo.build_id
          $BuildVersion = $buildINFO.buildinfo.build.version
          Write-Host "##vso[task.setvariable variable=BuildVersion;]$BuildVersion"
          $caminhoRelatorio = "$env:LOCALAPPDATA\App-$veracodeAppName-$BuildVersion.pdf"
          # Gera o relatorio
          $out = ./VeracodeAPI.exe -vid $(veracodeID) -vkey $(VeracodeKey) -action DetailedReport -buildid "$buildID" -format pdf -outputfilepath "$caminhoRelatorio"
          Write-Host "##vso[task.setvariable variable=caminhoRelatorio;]$caminhoRelatorio"
      }
      catch {
          $ErrorMessage = $_.Exception.Message # Recebe o erro
          Write-Host "Erro ao gerar o relatorio:"
          Write-Host "$ErrorMessage"
      }
  displayName: 'Veracode - Gerar relatorio'

- task: PowerShell@2
  inputs:
    workingDirectory: '$(Agent.BuildDirectory)'
    targetType: 'inline'
    script: |
      $caminhoRelatorio = "$(caminhoRelatorio)"
      $To = "$(contaAlerta)"
      $contaEmail = "$(contaEmail)"
      $SenhaEmail = "$(SenhaEmail)"
      $veracodeAppName = "$(veracodeAppProfile)"

      try {
          # Credencial
          $Password = ConvertTo-SecureString "$SenhaEmail" -AsPlainText -Force
          $credencialMail = New-Object System.Management.Automation.PSCredential ($contaEmail, $Password)

          # Envia o e-mail
          Send-MailMessage `
              -To $To `
              -Subject "Veracode Report - App $veracodeAppName - Build: $BuildVersion" `
              -Body "Segue em anexo o relatorio detalhado no ultimo scan do perfil $veracodeAppName" `
              -BodyAsHtml `
              -Priority high `
              -UseSsl `
              -Port 587 `
              -SmtpServer 'smtp.gmail.com' `
              -From $contaEmail `
              -Credential $credencialMail `
              -Attachments $caminhoRelatorio
          Write-Host "Enviado o relatorio: App $veracodeAppName - Build: $BuildVersion"
      }
      catch {
          $ErrorMessage = $_.Exception.Message # Recebe o erro
          Write-Host "Erro ao enviar o relatorio:"
          Write-Host "$ErrorMessage"
      }
  displayName: 'Veracode - Envia email'